@model IEnumerable<Planning.Contract.Model.Schedule>

@{
    ViewData["Title"] = "Задачи";
}

<div class="container">
    @Html.ActionLink("Добавить", "Create", "Schedule", null, new { @class = "btn btn-dark" })
    @Html.ActionLink("Переключиться на следующий проект", "MoveNext", "Schedule", null, new { @class = "btn btn-dark" })
    @Html.ActionLink("История", "History", "Schedule", null, new { @class = "btn btn-dark" })
    <hr>
    Фильтры:
    <div id="filter">
        <span class="col-sm-2">Наименование:</span><input id="filter_name" class="col-sm-4" />
        <span class="col-sm-2">Только активные:</span><input id="filter_active" type="checkbox" class="col-sm-4" />
        <span class="col-sm-2">Кол-во предыдущих:</span><input id="filter_before" class="col-sm-4" />
        <span class="col-sm-2">Дата с:</span><input id="datepicker_from" class="form-control datetimefield" value="@DateTimeOffset.Now.AddHours(-8).ToString("yyyy-MM-ddThh:mm")" />
        <span class="col-sm-2">Дата по:</span><input id="datepicker_from" class="form-control datetimefield" value="@DateTimeOffset.Now.AddMonths(1).ToString("yyyy-MM-ddThh:mm")" />
        <a href="#" id="refresh_filter_button" class="btn btn-dark col-sm-2 offset-1">Показать</a>
    </div>
    <div id="content"></div>
    <div>
        <a href="#" id="begin"><<</a>
        <a href="#" id="back"><</a>
        Страница <span id="page">0</span> из <span id="all_pages">0</span>
        <a href="#" id="forward">></a>
        <a href="#" id="end">>></a>
        Показывать по <input id="count_items" value="10" /> элементов на странице
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        var page = 1;
        var name = "";
        var allPages = 1;

        function refresh() {
            $('#page').html(page);
            $.get("Schedule/ListPaged/?page=" + (page - 1) + "&size=" + $('#count_items').val()
                + "&name=" + $('#filter_name').val() + "&onlyActive=" + $('#filter_active').val()
                + "&beforeRunCount=" + $('#filter_before').val()
                + "&fromDate=" + $('#filter_from').val()
                + "&toDate=" + $('#filter_to').val(),
                function (data, textStatus, request) {
                    $('#content').html(data);
                    allPages = request.getResponseHeader('x-pages');
                    $('#all_pages').html(allPages);
            });
        }

        $(function () {

            $.datetimepicker.setDateFormatter('moment');
            $(".datetimefield").datetimepicker({
                changeMonth: true,
                changeYear: true,
                changeDay: true,
                changeHour: true,
                changeMinute: true,
                format: 'YYYY-MM-DD hh:mm',
                formatTime: 'h:mm A',
                language: "ru"
            });      

            $.ajaxSetup({ cache: false });
            refresh();
            $("#refresh_filter_button").click(function () {
                refresh();
            });
            $('#count_items').change(function () {
                refresh();
            });
            $("#begin").click(function () {
                if (page > 1) {
                    page = 1;
                    refresh();
                }
            });
            $("#back").click(function () {
                if (page > 1) {
                    page = page - 1;
                    refresh();
                }
            });
            $("#forward").click(function () {
                if (page < allPages) {
                    page = page + 1;
                    refresh();
                }
            });
            $("#end").click(function () {
                if (page < allPages) {
                    page = allPages;
                    refresh();
                }
            });
        })
    </script>
}
